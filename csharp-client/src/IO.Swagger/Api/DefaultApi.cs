/* 
 * <PBXDom API>
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Calls&#x60; info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> CallsGet (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Calls&#x60; info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> CallsGetWithHttpInfo (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Charts&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> FeaturesChartsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Charts&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> FeaturesChartsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Reports&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> FeaturesReportsGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Reports&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> FeaturesReportsGetWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Widgets&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> FeaturesWidgetGet ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Widgets&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> FeaturesWidgetGetWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Calls&#x60; info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> CallsGetAsync (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Calls&#x60; info. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> CallsGetAsyncWithHttpInfo (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Charts&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesChartsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Charts&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesChartsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Reports&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesReportsGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Reports&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesReportsGetAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Widgets&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesWidgetGetAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Gets &#x60;Widgets&#x60; list. 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesWidgetGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Gets &#x60;Calls&#x60; info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> CallsGet (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = CallsGetWithHttpInfo(rptType, rptId, start, limit, sortBy, sortType, fromDate, toDate, duration, phone, phone1, co, ext, pbxId, callSource, callType, direction, callerName, did, dnis, acc, ring, cost, group);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets &#x60;Calls&#x60; info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > CallsGetWithHttpInfo (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null)
        {
            // verify the required parameter 'rptType' is set
            if (rptType == null)
                throw new ApiException(400, "Missing required parameter 'rptType' when calling DefaultApi->CallsGet");
            // verify the required parameter 'rptId' is set
            if (rptId == null)
                throw new ApiException(400, "Missing required parameter 'rptId' when calling DefaultApi->CallsGet");

            var localVarPath = "/Calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (rptType != null) localVarQueryParams.Add("rptType", Configuration.ApiClient.ParameterToString(rptType)); // query parameter
            if (rptId != null) localVarQueryParams.Add("rptId", Configuration.ApiClient.ParameterToString(rptId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortType != null) localVarQueryParams.Add("sortType", Configuration.ApiClient.ParameterToString(sortType)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("fromDate", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("toDate", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (duration != null) localVarQueryParams.Add("duration", Configuration.ApiClient.ParameterToString(duration)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (phone1 != null) localVarQueryParams.Add("phone1", Configuration.ApiClient.ParameterToString(phone1)); // query parameter
            if (co != null) localVarQueryParams.Add("co", Configuration.ApiClient.ParameterToString(co)); // query parameter
            if (ext != null) localVarQueryParams.Add("ext", Configuration.ApiClient.ParameterToString(ext)); // query parameter
            if (pbxId != null) localVarQueryParams.Add("pbxId", Configuration.ApiClient.ParameterToString(pbxId)); // query parameter
            if (callSource != null) localVarQueryParams.Add("callSource", Configuration.ApiClient.ParameterToString(callSource)); // query parameter
            if (callType != null) localVarQueryParams.Add("callType", Configuration.ApiClient.ParameterToString(callType)); // query parameter
            if (direction != null) localVarQueryParams.Add("direction", Configuration.ApiClient.ParameterToString(direction)); // query parameter
            if (callerName != null) localVarQueryParams.Add("callerName", Configuration.ApiClient.ParameterToString(callerName)); // query parameter
            if (did != null) localVarQueryParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // query parameter
            if (dnis != null) localVarQueryParams.Add("dnis", Configuration.ApiClient.ParameterToString(dnis)); // query parameter
            if (acc != null) localVarQueryParams.Add("acc", Configuration.ApiClient.ParameterToString(acc)); // query parameter
            if (ring != null) localVarQueryParams.Add("ring", Configuration.ApiClient.ParameterToString(ring)); // query parameter
            if (cost != null) localVarQueryParams.Add("cost", Configuration.ApiClient.ParameterToString(cost)); // query parameter
            if (group != null) localVarQueryParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling CallsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling CallsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Calls&#x60; info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> CallsGetAsync (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await CallsGetAsyncWithHttpInfo(rptType, rptId, start, limit, sortBy, sortType, fromDate, toDate, duration, phone, phone1, co, ext, pbxId, callSource, callType, direction, callerName, did, dnis, acc, ring, cost, group);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets &#x60;Calls&#x60; info. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="rptType">Report type. (0 report, 1 widget, 2 chart).</param>
        /// <param name="rptId">Report id.</param>
        /// <param name="start">Start offset. (optional)</param>
        /// <param name="limit">Number of results to return. Max 10K. (optional)</param>
        /// <param name="sortBy">Sort column. (optional)</param>
        /// <param name="sortType">Sort mode asc/desc. (optional)</param>
        /// <param name="fromDate">Start date time. (optional)</param>
        /// <param name="toDate">End date time. (optional)</param>
        /// <param name="duration">Duration range. (optional)</param>
        /// <param name="phone">List of caller phone. (optional)</param>
        /// <param name="phone1">List of dialled phones. (optional)</param>
        /// <param name="co">List of trunk/co. (optional)</param>
        /// <param name="ext">list of extensions. (optional)</param>
        /// <param name="pbxId">list of PBX Ids. (optional)</param>
        /// <param name="callSource">list of callsource. (optional)</param>
        /// <param name="callType">list of call type signatures.(5 Unanswered Calls, 7 Transfered Calls, 8 Forwarded Calls) (optional)</param>
        /// <param name="direction">list of direction.(0 incoming, 1 outgoing, 2 internal) (optional)</param>
        /// <param name="callerName">list of caller name. (optional)</param>
        /// <param name="did">list of did. (optional)</param>
        /// <param name="dnis">list of dnis. (optional)</param>
        /// <param name="acc">list of account code. (optional)</param>
        /// <param name="ring">Ring range.Seconds unit. (optional)</param>
        /// <param name="cost">Cost range. (optional)</param>
        /// <param name="group">Department/Group id. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> CallsGetAsyncWithHttpInfo (double? rptType, double? rptId, decimal? start = null, decimal? limit = null, string sortBy = null, string sortType = null, string fromDate = null, string toDate = null, decimal? duration = null, string phone = null, string phone1 = null, string co = null, string ext = null, decimal? pbxId = null, decimal? callSource = null, decimal? callType = null, decimal? direction = null, string callerName = null, string did = null, string dnis = null, string acc = null, decimal? ring = null, decimal? cost = null, decimal? group = null)
        {
            // verify the required parameter 'rptType' is set
            if (rptType == null)
                throw new ApiException(400, "Missing required parameter 'rptType' when calling DefaultApi->CallsGet");
            // verify the required parameter 'rptId' is set
            if (rptId == null)
                throw new ApiException(400, "Missing required parameter 'rptId' when calling DefaultApi->CallsGet");

            var localVarPath = "/Calls";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (rptType != null) localVarQueryParams.Add("rptType", Configuration.ApiClient.ParameterToString(rptType)); // query parameter
            if (rptId != null) localVarQueryParams.Add("rptId", Configuration.ApiClient.ParameterToString(rptId)); // query parameter
            if (start != null) localVarQueryParams.Add("start", Configuration.ApiClient.ParameterToString(start)); // query parameter
            if (limit != null) localVarQueryParams.Add("limit", Configuration.ApiClient.ParameterToString(limit)); // query parameter
            if (sortBy != null) localVarQueryParams.Add("sortBy", Configuration.ApiClient.ParameterToString(sortBy)); // query parameter
            if (sortType != null) localVarQueryParams.Add("sortType", Configuration.ApiClient.ParameterToString(sortType)); // query parameter
            if (fromDate != null) localVarQueryParams.Add("fromDate", Configuration.ApiClient.ParameterToString(fromDate)); // query parameter
            if (toDate != null) localVarQueryParams.Add("toDate", Configuration.ApiClient.ParameterToString(toDate)); // query parameter
            if (duration != null) localVarQueryParams.Add("duration", Configuration.ApiClient.ParameterToString(duration)); // query parameter
            if (phone != null) localVarQueryParams.Add("phone", Configuration.ApiClient.ParameterToString(phone)); // query parameter
            if (phone1 != null) localVarQueryParams.Add("phone1", Configuration.ApiClient.ParameterToString(phone1)); // query parameter
            if (co != null) localVarQueryParams.Add("co", Configuration.ApiClient.ParameterToString(co)); // query parameter
            if (ext != null) localVarQueryParams.Add("ext", Configuration.ApiClient.ParameterToString(ext)); // query parameter
            if (pbxId != null) localVarQueryParams.Add("pbxId", Configuration.ApiClient.ParameterToString(pbxId)); // query parameter
            if (callSource != null) localVarQueryParams.Add("callSource", Configuration.ApiClient.ParameterToString(callSource)); // query parameter
            if (callType != null) localVarQueryParams.Add("callType", Configuration.ApiClient.ParameterToString(callType)); // query parameter
            if (direction != null) localVarQueryParams.Add("direction", Configuration.ApiClient.ParameterToString(direction)); // query parameter
            if (callerName != null) localVarQueryParams.Add("callerName", Configuration.ApiClient.ParameterToString(callerName)); // query parameter
            if (did != null) localVarQueryParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // query parameter
            if (dnis != null) localVarQueryParams.Add("dnis", Configuration.ApiClient.ParameterToString(dnis)); // query parameter
            if (acc != null) localVarQueryParams.Add("acc", Configuration.ApiClient.ParameterToString(acc)); // query parameter
            if (ring != null) localVarQueryParams.Add("ring", Configuration.ApiClient.ParameterToString(ring)); // query parameter
            if (cost != null) localVarQueryParams.Add("cost", Configuration.ApiClient.ParameterToString(cost)); // query parameter
            if (group != null) localVarQueryParams.Add("group", Configuration.ApiClient.ParameterToString(group)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling CallsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling CallsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Charts&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> FeaturesChartsGet ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = FeaturesChartsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets &#x60;Charts&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > FeaturesChartsGetWithHttpInfo ()
        {

            var localVarPath = "/Features/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesChartsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesChartsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Charts&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesChartsGetAsync ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await FeaturesChartsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets &#x60;Charts&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesChartsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Features/charts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesChartsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesChartsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Reports&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> FeaturesReportsGet ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = FeaturesReportsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets &#x60;Reports&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > FeaturesReportsGetWithHttpInfo ()
        {

            var localVarPath = "/Features/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesReportsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesReportsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Reports&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesReportsGetAsync ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await FeaturesReportsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets &#x60;Reports&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesReportsGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Features/reports";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesReportsGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesReportsGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Widgets&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> FeaturesWidgetGet ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = FeaturesWidgetGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Gets &#x60;Widgets&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse< List<InlineResponse200> > FeaturesWidgetGetWithHttpInfo ()
        {

            var localVarPath = "/Features/widget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesWidgetGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesWidgetGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

        /// <summary>
        ///  Gets &#x60;Widgets&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> FeaturesWidgetGetAsync ()
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await FeaturesWidgetGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Gets &#x60;Widgets&#x60; list. 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> FeaturesWidgetGetAsyncWithHttpInfo ()
        {

            var localVarPath = "/Features/widget";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (localVarStatusCode >= 400)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesWidgetGet: " + localVarResponse.Content, localVarResponse.Content);
            else if (localVarStatusCode == 0)
                throw new ApiException (localVarStatusCode, "Error calling FeaturesWidgetGet: " + localVarResponse.ErrorMessage, localVarResponse.ErrorMessage);

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<InlineResponse200>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
            
        }

    }
}
