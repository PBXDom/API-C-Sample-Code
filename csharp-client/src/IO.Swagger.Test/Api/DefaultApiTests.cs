/* 
 * <PBXDom API>
 *
 * OpenAPI spec version: 2.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOf<DefaultApi> (instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test CallsGet
        /// </summary>
        [Test]
        public void CallsGetTest()
        {
            // TODO: add unit test for the method 'CallsGet'
            double? rptType = null; // TODO: replace null with proper value
            double? rptId = null; // TODO: replace null with proper value
            decimal? start = null; // TODO: replace null with proper value
            decimal? limit = null; // TODO: replace null with proper value
            string sortBy = null; // TODO: replace null with proper value
            string sortType = null; // TODO: replace null with proper value
            string fromDate = null; // TODO: replace null with proper value
            string toDate = null; // TODO: replace null with proper value
            decimal? duration = null; // TODO: replace null with proper value
            string phone = null; // TODO: replace null with proper value
            string phone1 = null; // TODO: replace null with proper value
            string co = null; // TODO: replace null with proper value
            string ext = null; // TODO: replace null with proper value
            decimal? pbxId = null; // TODO: replace null with proper value
            decimal? callSource = null; // TODO: replace null with proper value
            decimal? callType = null; // TODO: replace null with proper value
            decimal? direction = null; // TODO: replace null with proper value
            string callerName = null; // TODO: replace null with proper value
            string did = null; // TODO: replace null with proper value
            string dnis = null; // TODO: replace null with proper value
            string acc = null; // TODO: replace null with proper value
            decimal? ring = null; // TODO: replace null with proper value
            decimal? cost = null; // TODO: replace null with proper value
            decimal? group = null; // TODO: replace null with proper value
            var response = instance.CallsGet(rptType, rptId, start, limit, sortBy, sortType, fromDate, toDate, duration, phone, phone1, co, ext, pbxId, callSource, callType, direction, callerName, did, dnis, acc, ring, cost, group);
            Assert.IsInstanceOf<List<InlineResponse200>> (response, "response is List<InlineResponse200>");
        }
        
        /// <summary>
        /// Test FeaturesChartsGet
        /// </summary>
        [Test]
        public void FeaturesChartsGetTest()
        {
            // TODO: add unit test for the method 'FeaturesChartsGet'
            var response = instance.FeaturesChartsGet();
            Assert.IsInstanceOf<List<InlineResponse200>> (response, "response is List<InlineResponse200>");
        }
        
        /// <summary>
        /// Test FeaturesReportsGet
        /// </summary>
        [Test]
        public void FeaturesReportsGetTest()
        {
            // TODO: add unit test for the method 'FeaturesReportsGet'
            var response = instance.FeaturesReportsGet();
            Assert.IsInstanceOf<List<InlineResponse200>> (response, "response is List<InlineResponse200>");
        }
        
        /// <summary>
        /// Test FeaturesWidgetGet
        /// </summary>
        [Test]
        public void FeaturesWidgetGetTest()
        {
            // TODO: add unit test for the method 'FeaturesWidgetGet'
            var response = instance.FeaturesWidgetGet();
            Assert.IsInstanceOf<List<InlineResponse200>> (response, "response is List<InlineResponse200>");
        }
        
    }

}
